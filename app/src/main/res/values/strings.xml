<resources>
    <string name="app_name">AndroidLibrary</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="butterknife_intro">ButterKnife adalah sebuah library yang digunakan untuk mempermudah syntax</string>
    <string name="butterknife_howtouse">dependencies {
        \ncompile "'com.jakewharton:butterknife:8.6.0'"
        \nannotationProcessor "'com.jakewharton:butterknife-compiler:8.6.0'"
        \n}
    </string>
    <string name="butterknife_content">Beberapa annotasi yang dapat digunakan, yaitu:
        \nResource Binding
        \n@BindString(R.string.title) String title;
        \n@BindDrawable(R.drawable.graphic) Drawable graphic;
        \n@BindColor(R.color.red) int red; // int or ColorStateList field
        \n@BindDimen(R.dimen.spacer) Float spacer;
        \n
        \nListener Binding
        \n@OnClick(R.id.submit)
        \npublic void submit(View view) {
        \n}
    </string>

    <string name="saripaar_intro">Saripaar adalah sebuah library yang digunakan untuk mempermudah validasi form</string>
    <string name="saripaar_howtouse">dependencies {
        \ncompile "'com.mobsandgeeks:android-saripaar:2.0.3'"
        \n}
    </string>
    <string name="saripaar_content">Step 1: Menggunakan Anotasi Saripaar
        \n@NotEmpty
        \n@Email
        \nprivate EditText emailEditText;
        \n@Password(min = 6, scheme = Password.Scheme.ALPHA_NUMERIC_MIXED_CASE_SYMBOLS)
        \nprivate EditText passwordEditText;
        \n
        \nStep 2: Inisiasi Validator
        \n@Override
        \npublic void onCreate(Bundle savedInstanceState) {
            \n\tsuper.onCreate(savedInstanceState);
            \n\t// Code…
            \n\tvalidator = new Validator(this);
            \n\tvalidator.setValidationListener(this);
            \n\t// More code…
        \n}
        \n
        \nStep 3: Implementasi ValidationListener
        \n@Override
        \npublic void onValidationSucceeded() {
            \n\t// do something
        \n}
        \n@Override
        \npublic void onValidationFailed() {
            \n\t// do something
        \n}
        \n
        \nStep 4: Validasi
        \nregisterButton.setOnClickListener(new OnClickListener() {
            \n\t@Override
            \n\tpublic void onClick(View v) {
                \n\t\tvalidator.validate();
            \n\t}
        \n});
    </string>

    <string name="gson_intro">Gson adalah sebuah library yang digunakan untuk mempermudah pemrosesan JSON</string>
    <string name="gson_howtouse">dependencies {
        \ncompile "'com.google.code.gson:gson:2.8.1'"
        \n}
    </string>
    <string name="gson_content"></string>

    <string name="glide_intro">
        Glide adalah pengelolaan media open source yang cepat dan efisien serta kerangka pemuatan gambar untuk Android yang membungkus decoding media, memori dan disk caching, dan penyatuan sumber daya menjadi antarmuka yang sederhana dan mudah digunakan.
    </string>
    <string name="glide_howtouse">
        repositories {
        \n  mavenCentral() // jcenter() works as well because it pulls from Maven Central
        \n}

        \ndependencies {
        \n  compile "'com.github.bumptech.glide:glide:4.0.0-RC0'"
        \n  compile "'com.android.support:support-v4:25.3.1'"
        \n  annotationProcessor "'com.github.bumptech.glide:compiler:4.0.0-RC0'"
        \n}
    </string>
    <string name="glide_content">
        // For a simple view:
        \n@Override public void onCreate(Bundle savedInstanceState) {
        \n  .\..
        \n  ImageView imageView = (ImageView) findViewById(R.id.my_image_view);
        \n
        \n  Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);
        \n}
        \n
        \n// For a simple image list:
        \n@Override public View getView(int position, View recycled, ViewGroup container) {
        \n  final ImageView myImageView;
        \n  if (recycled == null) {
        \n    myImageView = (ImageView) inflater.inflate(R.layout.my_image_view, container, false);
        \n  } else {
        \n    myImageView = (ImageView) recycled;
        \n  }
        \n
        \n  String url = myUrls.get(position);
        \n
        \n  Glide
        \n    .with(myFragment)
        \n    .load(url)
        \n    .centerCrop()
        \n    .placeholder(R.drawable.loading_spinner)
        \n    .into(myImageView);
        \n
        \n  return myImageView;
        \n}
    </string>

    <string name="photoview_intro">
        PhotoView bertujuan untuk membantu menghasilkan implementasi ImageView Android yang mudah digunakan.
    </string>
    <string name="photoview_intro2">
         - Out of the box zooming, using multi-touch and double-tap.
        \n - Scrolling, with smooth scrolling fling.
        \n - Works perfectly when used in a scrolling parent (such as ViewPager).
        \n - Allows the application to be notified when the displayed Matrix has changed. Useful for when you need to update your UI based on the current zoom/scroll position.
        \n - Allows the application to be notified when the user taps on the Photo.
    </string>
    <string name="photoview_howtouse">
        Add this in your root build.gradle file (not your module build.gradle file):
        \nallprojects {
        \n    repositories {
        \n        maven { url "'https://jitpack.io'" }
        \n    }
        \n}
        \n
        \nThen, add the library to your module build.gradle
        \ndependencies {
        \n    compile "'com.github.chrisbanes:PhotoView:2.0.0'"
        \n}
    </string>
    <string name="photoview_content">
        Pada xml:
        \n&lt;com.github.chrisbanes.photoview.PhotoView
        \n    android:id="@+id/photo_view"
        \n    android:layout_width="match_parent"
        \n    android:layout_height="match_parent"/>
        \n
        \nPada java:
        \nPhotoView photoView = (PhotoView) findViewById(R.id.photo_view);
        \nphotoView.setImageResource(R.drawable.image);
    </string>
    
    <string name="hello_blank_fragment">Hello</string>
</resources>
